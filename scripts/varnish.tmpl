{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}
vcl 4.0;
import directors;

{{ define "backend" }}
	{{ if .Address }}
		{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
		{{ if and .Container.Node.ID .Address.HostPort }}
backend {{ .Container.Name }} {
	# {{ .Container.Node.Name }}/{{ .Container.Name }}
	.host = "{{ .Container.Node.Address.IP }}:{{ .Address.HostPort }}";
	.probe = {
		.url = "/";
		.timeout = 1s;
		.interval = 5s;
		.window = 5;
		.threshold = 3;
	}
}
		{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
		{{ else if .Network }}
backend {{ .Container.Name }} {
	# {{ .Container.Name }}
	.host="{{ .Network.IP }}:{{ .Address.Port }}";
	.probe = {
		.url = "/";
		.timeout = 1s;
		.interval = 5s;
		.window = 5;
		.threshold = 3;
	}
}
		{{ end }}
	{{ end }}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.BACKEND_HOST" "," }}
{{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}

	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
			{{ if eq $knownNetwork.Name $containerNetwork.Name }}
## Can connect with "{{ $containerNetwork.Name }}" network
				{{/* If only 1 port exposed, use that */}}
				{{ if eq $addrLen 1 }}
					{{ $address := index $container.Addresses 0 }}
					{{ template "backend" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
				{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
				{{ else }}
					{{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
					{{ $address := where $container.Addresses "Port" $port | first }}
					{{ template "backend" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
{{ end }}

sub vcl_init {
	new vdir = directors.round_robin();
{{ range $host, $containers := groupByMulti $ "Env.BACKEND_HOST" "," }}
{{ range $container := $containers }}
	vdir.add_backend({{ $container.Name }});
{{ end }}
{{ end }}
}

sub vcl_recv {
	set req.backend_hint = vdir.backend();
}
